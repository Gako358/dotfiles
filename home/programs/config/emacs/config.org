#+STARTUP: overview
#+TITLE: MerrinX Config
#+CREATOR: Merrinx
#+LANGUAGE: en

* Installation
Git clone https://github.com/gako358/dotfiles.git.
The configuration is setup using NixOS, check README.


* Appearance
Using dashboard and doom-theme with modeline.

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "Welcome back Master"
          dashboard-set-file-icons t
          dashboard-center-content t
          dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5))
          initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    :init
    :hook (after-init . dashboard-setup-startup-hook))

  (use-package kaolin-themes
    :config
    (setq kaolin-ocean-alt-bg t)
    (setq kaolin-themes-italic-comments t
          kaolin-themes-hl-line-colored t
          kaolin-themes-git-gutter-solid t)
    (load-theme 'kaolin-ocean t))

  (set-frame-parameter (selected-frame) 'alpha '(97 . 73))
  (add-to-list 'default-frame-alist '(alpha . (97 . 73)))

  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(97 . 73) '(100 . 100)))))
  (global-set-key (kbd "C-S-s") 'toggle-transparency)

  (use-package all-the-icons
    :ensure t)

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package nerd-icons
    :ensure t
    :config
    (setq nerd-icons-font-family "Iosevka Nerd Font"))

  (add-hook 'after-make-frame-functions
            (lambda (f)
              (with-selected-frame f
                (set-frame-font "Iosevka Nerd Font 11" nil t)
                (set-face-attribute 'mode-line nil :font "Iosevka Nerd Font 12" :height 100)
                (set-face-attribute 'company-tooltip nil :font "Iosevka Nerd Font 11" :height 100))))

  (add-to-list 'default-frame-alist '(height . 64))
  (add-to-list 'default-frame-alist '(width . 370))

    #+end_src

* Core
#+begin_src emacs-lisp
    (defvar minimal-emacs-ui-features '()
      "List of user interface features to disable in minimal Emacs setup.

    This variable holds a list Emacs UI features that can be enabled:
    - `context-menu`: Enables the context menu in graphical environments.
    - `tool-bar`: Enables the tool bar in graphical environments.
    - `menu-bar`: Enables the menu bar in graphical environments.
    - `dialogs`: Enables both file dialogs and dialog boxes.
    - `tooltips`: Enables tooltips.

    Each feature in the list corresponds to a specific UI component that can be
    turned on.")

    (defvar minimal-emacs-frame-title-format "%b â€“ Emacs"
      "Template for displaying the title bar of visible and iconified frame.")

    (defvar minimal-emacs-debug nil
      "Non-nil to enable debug.")

    (defvar minimal-emacs-gc-cons-threshold (* 16 1024 1024)
      "The value of `gc-cons-threshold' after Emacs startup.")

    (defvar minimal-emacs-package-initialize-and-refresh t
      "Whether to automatically initialize and refresh packages.
    When set to non-nil, Emacs will automatically call `package-initialize' and
    `package-refresh-contents' to set up and update the package system.")

    (defvar minimal-emacs-user-directory user-emacs-directory
      "The default value of the `user-emacs-directory' variable.")

    ;;; Load pre-early-init.el

    (defun minimal-emacs-load-user-init (filename)
      "Execute a file of Lisp code named FILENAME."
      (let ((user-init-file
             (expand-file-name filename
                               minimal-emacs-user-directory)))
        (when (file-exists-p user-init-file)
          (load user-init-file nil t))))

    (minimal-emacs-load-user-init "pre-early-init.el")

    (setq custom-theme-directory
          (expand-file-name "themes/" minimal-emacs-user-directory))
    (setq custom-file (expand-file-name "custom.el" minimal-emacs-user-directory))

    ;;; Garbage collection
    ;; Garbage collection significantly affects startup times. This setting delays
    ;; garbage collection during startup but will be reset later.

    (setq gc-cons-threshold most-positive-fixnum)

    (add-hook 'emacs-startup-hook
              (lambda ()
                (setq gc-cons-threshold minimal-emacs-gc-cons-threshold)))

    ;;; Misc

    (set-language-environment "UTF-8")

    ;; Set-language-environment sets default-input-method, which is unwanted.
    (setq default-input-method nil)

    ;;; Performance

    ;; Prefer loading newer compiled files
    (setq load-prefer-newer t)

    ;; Font compacting can be very resource-intensive, especially when rendering
    ;; icon fonts on Windows. This will increase memory usage.
    (setq inhibit-compacting-font-caches t)

    (unless (daemonp)
      (let ((old-value (default-toplevel-value 'file-name-handler-alist)))
        (set-default-toplevel-value
         'file-name-handler-alist
         ;; Determine the state of bundled libraries using calc-loaddefs.el.
         ;; If compressed, retain the gzip handler in `file-name-handler-alist`.
         ;; If compiled or neither, omit the gzip handler during startup for
         ;; improved startup and package load time.
         (if (eval-when-compile
               (locate-file-internal "calc-loaddefs.el" load-path))
             nil
           (list (rassq 'jka-compr-handler old-value))))
        ;; Ensure the new value persists through any current let-binding.
        (set-default-toplevel-value 'file-name-handler-alist
                                    file-name-handler-alist)
        ;; Remember the old value to reset it as needed.
        (add-hook 'emacs-startup-hook
                  (lambda ()
                    (set-default-toplevel-value
                     'file-name-handler-alist
                     ;; Merge instead of overwrite to preserve any changes made
                     ;; since startup.
                     (delete-dups (append file-name-handler-alist old-value))))
                  101))

      (unless noninteractive
        (unless minimal-emacs-debug
          (unless minimal-emacs-debug
            ;; Suppress redisplay and redraw during startup to avoid delays and
            ;; prevent flashing an unstyled Emacs frame.
            ;; (setq-default inhibit-redisplay t) ; Can cause artifacts
            (setq-default inhibit-message t)

            ;; Reset the above variables to prevent Emacs from appearing frozen or
            ;; visually corrupted after startup or if a startup error occurs.
            (defun minimal-emacs--reset-inhibited-vars-h ()
              ;; (setq-default inhibit-redisplay nil) ; Can cause artifacts
              (setq-default inhibit-message nil)
              (remove-hook 'post-command-hook #'minimal-emacs--reset-inhibited-vars-h))

            (add-hook 'post-command-hook
                      #'minimal-emacs--reset-inhibited-vars-h -100))

          (dolist (buf (buffer-list))
            (with-current-buffer buf
              (setq mode-line-format nil)))

          (put 'mode-line-format 'initial-value
               (default-toplevel-value 'mode-line-format))
          (setq-default mode-line-format nil)

          (defun minimal-emacs--startup-load-user-init-file (fn &rest args)
            "Advice for startup--load-user-init-file to reset mode-line-format."
            (unwind-protect
                (progn
                  ;; Start up as normal
                  (apply fn args))
              ;; If we don't undo inhibit-{message, redisplay} and there's an
              ;; error, we'll see nothing but a blank Emacs frame.
              (setq-default inhibit-message nil)
              (unless (default-toplevel-value 'mode-line-format)
                (setq-default mode-line-format
                              (get 'mode-line-format 'initial-value)))))

          (advice-add 'startup--load-user-init-file :around
                      #'minimal-emacs--startup-load-user-init-file))

        ;; Without this, Emacs will try to resize itself to a specific column size
        (setq frame-inhibit-implied-resize t)

        ;; A second, case-insensitive pass over `auto-mode-alist' is time wasted.
        ;; No second pass of case-insensitive search over auto-mode-alist.
        (setq auto-mode-case-fold nil)

        ;; Reduce *Message* noise at startup. An empty scratch buffer (or the
        ;; dashboard) is more than enough, and faster to display.
        (setq inhibit-startup-screen t
              inhibit-startup-echo-area-message user-login-name)
        (setq initial-buffer-choice nil
              inhibit-startup-buffer-menu t
              inhibit-x-resources t)

        ;; Disable bidirectional text scanning for a modest performance boost.
        (setq-default bidi-display-reordering 'left-to-right
                      bidi-paragraph-direction 'left-to-right)

        ;; Give up some bidirectional functionality for slightly faster re-display.
        (setq bidi-inhibit-bpa t)

        ;; Remove "For information about GNU Emacs..." message at startup
        (advice-add #'display-startup-echo-area-message :override #'ignore)

        ;; Suppress the vanilla startup screen completely. We've disabled it with
        ;; `inhibit-startup-screen', but it would still initialize anyway.
        (advice-add #'display-startup-screen :override #'ignore)

        ;; Shave seconds off startup time by starting the scratch buffer in
        ;; `fundamental-mode'
        (setq initial-major-mode 'fundamental-mode
              initial-scratch-message nil)

        (unless minimal-emacs-debug
          ;; Unset command line options irrelevant to the current OS. These options
          ;; are still processed by `command-line-1` but have no effect.
          (unless (eq system-type 'darwin)
            (setq command-line-ns-option-alist nil))
          (unless (memq initial-window-system '(x pgtk))
            (setq command-line-x-option-alist nil)))))

    ;;; Native compilation and Byte compilation

    (if (and (featurep 'native-compile)
             (fboundp 'native-comp-available-p)
             (native-comp-available-p))
        ;; Activate `native-compile'
        (setq native-comp-jit-compilation t
              native-comp-deferred-compilation t  ; Obsolete since Emacs 29.1
              package-native-compile t)
      ;; Deactivate the `native-compile' feature if it is not available
      (setq features (delq 'native-compile features)))

    ;; Suppress compiler warnings and don't inundate users with their popups.
    (setq native-comp-async-report-warnings-errors
          (or minimal-emacs-debug 'silent))
    (setq native-comp-warning-on-missing-source minimal-emacs-debug)

    (setq debug-on-error minimal-emacs-debug
          jka-compr-verbose minimal-emacs-debug)

    (setq byte-compile-warnings minimal-emacs-debug)
    (setq byte-compile-verbose minimal-emacs-debug)

    ;;; UI elements

    (setq frame-title-format minimal-emacs-frame-title-format
          icon-title-format minimal-emacs-frame-title-format)

    ;; Disable startup screens and messages
    (setq inhibit-splash-screen t)

    ;; I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
    ;; `scroll-bar-mode' because manipulating frame parameters can trigger or queue
    ;; a superfluous and potentially expensive frame redraw at startup, depending
    ;; on the window system. The variables must also be set to `nil' so users don't
    ;; have to call the functions twice to re-enable them.
    (unless (memq 'menu-bar minimal-emacs-ui-features)
      (push '(menu-bar-lines . 0) default-frame-alist)
      (unless (memq window-system '(mac ns))
        (setq menu-bar-mode nil)))

    (unless (daemonp)
      (unless noninteractive
        (when (fboundp 'tool-bar-setup)
          ;; Temporarily override the tool-bar-setup function to prevent it from
          ;; running during the initial stages of startup
          (advice-add #'tool-bar-setup :override #'ignore)
          (define-advice startup--load-user-init-file
              (:after (&rest _) minimal-emacs-setup-toolbar)
            (advice-remove #'tool-bar-setup #'ignore)
            (when tool-bar-mode
              (tool-bar-setup))))))
    (unless (memq 'tool-bar minimal-emacs-ui-features)
      (push '(tool-bar-lines . 0) default-frame-alist)
      (setq tool-bar-mode nil))

    (push '(vertical-scroll-bars) default-frame-alist)
    (push '(horizontal-scroll-bars) default-frame-alist)
    (setq scroll-bar-mode nil)
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))

    (unless (memq 'tooltips minimal-emacs-ui-features)
      (when (bound-and-true-p tooltip-mode)
        (tooltip-mode -1)))

    ;; Disable GUIs because they are inconsistent across systems, desktop
    ;; environments, and themes, and they don't match the look of Emacs.
    (unless (memq 'dialogs minimal-emacs-ui-features)
      (setq use-file-dialog nil)
      (setq use-dialog-box nil))

    ;;; LSP
    (setenv "LSP_USE_PLISTS" "true")

#+end_src

* Config
#+begin_src emacs-lisp
  ;; Ensure Emacs loads the most recent byte-compiled files.
  (setq load-prefer-newer t)

  ;; Ensure JIT compilation is enabled for improved performance by
  ;; native-compiling loaded .elc files asynchronously
  (setq native-comp-jit-compilation t)
                                          ;(setq native-comp-deferred-compilation t) ; Deprecated in Emacs > 29.1

                                          ;(use-package compile-angel
                                          ;  :ensure t
                                          ;  :demand t
                                          ;  :config
                                          ;  (compile-angel-on-load-mode)
                                          ;  (add-hook 'emacs-lisp-mode-hook #'compile-angel-on-save-local-mode))

  ;; Auto-revert in Emacs is a feature that automatically updates the
  ;; contents of a buffer to reflect changes made to the underlying file
  ;; on disk.
  (add-hook 'after-init-hook #'global-auto-revert-mode)

  ;; recentf is an Emacs package that maintains a list of recently
  ;; accessed files, making it easier to reopen files you have worked on
  ;; recently.
  (add-hook 'after-init-hook #'recentf-mode)

  ;; savehist is an Emacs feature that preserves the minibuffer history between
  ;; sessions. It saves the history of inputs in the minibuffer, such as commands,
  ;; search strings, and other prompts, to a file. This allows users to retain
  ;; their minibuffer history across Emacs restarts.
  (add-hook 'after-init-hook #'savehist-mode)

  ;; save-place-mode enables Emacs to remember the last location within a file
  ;; upon reopening. This feature is particularly beneficial for resuming work at
  ;; the precise point where you previously left off.
  (add-hook 'after-init-hook #'save-place-mode)

  ;; Turn on which-key-mode
  (add-hook 'after-init-hook 'which-key-mode)

  ;; Turn off autosave-mode
  ;; turn off backup-files
  (auto-save-mode -1)
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ;;; Line numbers
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)

#+end_src
* Completion
Using company for code completion.

#+begin_src emacs-lisp
  (use-package company
    :demand t
    :config
    (setq
     company-backends '(company-capf company-files company-dabbrev)
     company-dabbrev-downcase 0
     company-idle-delay 0)
    :init
    :hook (after-init . global-company-mode))

  (use-package company-box
    :demand t
    :config
    (setq
     company-box-icons-alist 'company-box-icons-all-the-icons
     company-box-backends-colors nil
     company-box-show-single-candidate t
     company-box-max-candidates 50
     company-box-doc-delay 0.1
     company-box-enable-icon t
     company-box-scrollbar t)
    :hook (company-mode . company-box-mode))

  (use-package company-quickhelp
    :demand t
    :config
    (setq company-quickhelp-delay 0.1)
    :after company
    :init
    :hook (company-mode . company-quickhelp-mode))

  (use-package copilot
    :demand t
    :hook (prog-mode-hook . copilot-mode))

  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)

  (use-package copilot-chat
    :after request
    :config
    (setq copilot-chat-backend 'request))

  (use-package ivy
    :init
    (ivy-mode 1)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) "))

#+end_src

* Keybindings
Keys that I have binded to my keyboard for easy navigation in emacs

#+begin_src emacs-lisp
  ;; evil-want-keybinding must be declared before Evil and Evil Collection
  (setq evil-want-keybinding nil)

  (use-package evil
    :ensure t
    :init
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :custom
    (evil-want-Y-yank-to-eol t)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)
    (evil-mode 1))

  ;;; Leader
  (use-package evil-leader)
  (global-evil-leader-mode)
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
      ;; Project
      "fb" 'counsel-find-file
      "ff" 'projectile-find-file
      "fg" 'projectile-ripgrep
      "pp" 'projectile-switch-project
      "ps" 'projectile-switch-to-buffer
      "pc" 'projectile-cleanup-known-projects

      ;; Buffers
      "bb" 'switch-to-buffer
      "bd" 'kill-buffer
      "bn" 'next-buffer
      "bp" 'previous-buffer

      ;; Copilot
      "ccq" 'move-right-and-open-copilot-chat
      "cce" 'copilot-chat-explain
      "ccr" 'copilot-chat-reset
      "ccv" 'copilot-chat-review
      "ccd" 'copilot-chat-doc
      "ccf" 'copilot-chat-fix
      "cbl" 'move-and-open-copilot-chat-list
      "cba" 'copilot-chat-add-current-buffer
      "cbd" 'copilot-chat-del-current-buffer

      ;; Git
      "/" 'magit-status
      "bm" 'blamer-mode

      ;; LSP
      "la" 'eglot-code-actions
      "lf" 'eglot-format
      "li" 'ident-region
      "ln" 'flymake-goto-next-error
      "le" 'eglot
      "lwd" 'flymake-show-project-diagnostics
      "lbd" 'flymake-show-buffer-diagnostics
      "e"  'eldoc-box-help-at-point
    )

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-visualstar
    :after evil
    :ensure t
    :defer t
    :commands global-evil-visualstar-mode
    :hook (after-init . global-evil-visualstar-mode))

  (use-package evil-surround
    :after evil
    :ensure t
    :defer t
    :commands global-evil-surround-mode
    :custom
    (evil-surround-pairs-alist
     '((?\( . ("(" . ")"))
       (?\[ . ("[" . "]"))
       (?\{ . ("{" . "}"))

       (?\) . ("(" . ")"))
       (?\] . ("[" . "]"))
       (?\} . ("{" . "}"))

       (?< . ("<" . ">"))
       (?> . ("<" . ">"))))
    :hook (after-init . global-evil-surround-mode))

  (with-eval-after-load "evil"
    (evil-define-operator my-evil-comment-or-uncomment (beg end)
      "Toggle comment for the region between BEG and END."
      (interactive "<r>")
      (comment-or-uncomment-region beg end))
    (evil-define-key 'normal 'global (kbd "gc") 'my-evil-comment-or-uncomment))

  (defun split-window-right-and-move-there-dammit ()
    (interactive)
    (split-window-right)
    (windmove-right))

  (defun split-window-left-and-move-there-dammit ()
    (interactive)
    (split-window-left)
    (windmove-left))

  (defun split-window-below-and-move-there-dammit ()
    (interactive)
    (split-window-below)
    (windmove-down))

  (defun move-text-internal (arg)
    (cond
     ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
          (exchange-point-and-mark))
      (let ((column (current-column))
            (text (delete-and-extract-region (point) (mark))))
        (forward-line arg)
        (move-to-column column t)
        (set-mark (point))
        (insert text)
        (exchange-point-and-mark)
        (setq deactivate-mark nil)))
     (t
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg))
        (forward-line -1)))))

  (defun move-text-down (arg)
    (interactive "*p")
    (move-text-internal arg))

  (defun move-text-up (arg)
    (interactive "*p")
    (move-text-internal (- arg)))

  (defun move-right-and-open-todo ()
    (interactive)
    (split-window-right)
    (windmove-right)
    (find-file "~/Documents/notes/org/todo.org"))

  (defun replace-word-at-point ()
    "Replace all occurrences of the word at point with a user-provided word in the current buffer."
    (let ((old-word (thing-at-point 'word))
          (new-word (read-string "Enter new word: ")))
      (save-excursion
        (goto-char (point-min))
        (while (search-forward old-word nil t)
          (replace-match new-word)))))

  (defun move-right-and-open-copilot-chat ()
    (interactive)
    (split-window-right)
    (windmove-right)
    (copilot-chat-display))

  (defun move-and-open-copilot-chat-list ()
    "If nothing is open to the right, split right, move there and open copilot-chat-list, or if something is open to the right, split below, move there and open copilot-chat-list."
    (interactive)
    (if (windmove-find-other-window 'right)
        (progn
          (split-window-below)
          (windmove-down))
      (progn
        (split-window-right)
        (windmove-right)))
    (copilot-chat-list))

  (global-set-key (kbd "C-S-l") 'split-window-right-and-move-there-dammit)
  (global-set-key (kbd "C-S-h") 'split-window-left-and-move-there-dammit)
  (global-set-key (kbd "C-S-j") 'split-window-below-and-move-there-dammit)
  (global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-S-<down>") 'shrink-window)
  (global-set-key (kbd "C-S-<up>") 'enlarge-window)
  (global-set-key (kbd "C-h") 'windmove-left)
  (global-set-key (kbd "C-j") 'windmove-down)
  (global-set-key (kbd "C-k") 'windmove-up)
  (global-set-key (kbd "C-l") 'windmove-right)
  (global-set-key (kbd "S-<up>") 'move-text-up)
  (global-set-key (kbd "S-<down>") 'move-text-down)
  (global-set-key (kbd "S-<tab>") 'previous-buffer)
  (global-set-key (kbd "C-S-i") 'move-right-and-open-todo)

#+end_src

* Languages
Using Eglot, emacs builtinn LSP client.
Setup using:
- Java
- Nix
- Python
- Rust
- SBT and Scala
- SQL

Using own created web mode, for vue, typescript and tailwind.

#+begin_src emacs-lisp
  (use-package treesit
    :ensure nil
    :custom
    (treesit-font-lock-level 4)
    :config
    (seq-do (lambda (it)
              (push it major-mode-remap-alist))
            '((python-mode . python-ts-mode)
              (javascript-mode . js-ts-mode)
              (typescript-mode . typescript-ts-mode)
              (java-mode . java-ts-mode)
              (css-mode . css-ts-mode)
              (sh-mode . bash-ts-mode)
              (scala-mode . scala-ts-mode)
              (shell-script-mode . bash-ts-mode))))

  (use-package scala-ts-mode
    :init
    (setq scala-ts-indent-offset 2))

  (use-package haskell-mode)

  (use-package nix-ts-mode
    :mode "\\.nix\\'")

  (use-package nixpkgs-fmt
    :commands nixpkgs-fmt
    :hook (nix-mode . nixpkgs-fmt-on-save-mode))

  (use-package typescript-ts-mode
    :mode (("\\.cts\\'" . typescript-ts-mode)
           ("\\.tsx\\'" . typescript-ts-mode)
           ("\\.ts\\'" . typescript-ts-mode)))

  (use-package eglot-booster
    :after eglot
    :config	(eglot-booster-mode))

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(scala-ts-mode . ("metals"))))

  (use-package blacken)
  (use-package python-mode
    :hook (python-mode . eglot-ensure))

  (use-package rustic
    :after eglot
    :hook (rustic-mode . eglot-ensure)
    :mode "\\.rs\\'")

  (use-package eldoc-box)

  (use-package web-mode
    :ensure t
    :mode
    (("\\.phtml\\'" . web-mode)
     ("\\.php\\'" . web-mode)
     ("\\.vue\\'" . web-mode)
     ("\\.tpl\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)))
#+end_src

* Projects
Projectile is the goto project package to use with emacs.
Easy to use and setup, easy use of buffers.

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :config
    (setq projectile-enable-caching t
          projectile-completion-system 'ivy
          projectile-indexing-method 'alien
          projectile-sort-order 'recently-active
          projectile-project-search-path '("~/Projects/" ("~/Projects/workspace/" . 1))))

  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode))

  ;;; Terminal
  (use-package eat)
  (add-hook 'eshell-load-hook #'eat-eshell-mode)
  (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)
#+end_src

* Version
Using magit with forge, creates the best environment for working with
Git inside emacs, the only thing missing here is a way to approve PR.
For forge, create a file called ~/.authinfo with the following:

- machine api.github.com login gako358^forge password ==secret-token==

#+begin_src emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :custom
    (git-gutter:update-interval 0.05))

  (use-package git-gutter-fringe
    :after git-gutter
    :config
    (fringe-mode '(8 . 8))
    (define-fringe-bitmap 'git-gutter-fr:added
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:modified
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:deleted
      [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248]
      nil nil 'center))

  (use-package blamer
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70))

  (use-package forge
    :after magit)
#+end_src
