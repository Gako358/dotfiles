#+STARTUP: overview
#+TITLE: MerrinX Config
#+CREATOR: Merrinx
#+LANGUAGE: en

* Installation
Git clone https://github.com/gako358/dotfiles.git.
The configuration is setup using NixOS, check README.


* Appearance
Using dashboard and doom-theme with modeline.

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "Welcome back Master"
          dashboard-set-file-icons t
          dashboard-center-content t
          dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5))
          initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    :init
    :hook (after-init . dashboard-setup-startup-hook))

  (use-package kaolin-themes
    :config
    (setq kaolin-ocean-alt-bg t)
    (setq kaolin-themes-italic-comments t
          kaolin-themes-hl-line-colored t
          kaolin-themes-git-gutter-solid t)
    (load-theme 'kaolin-ocean t))

  (use-package mood-line
    :ensure t
    :custom-face
    :config
    (mood-line-mode)
    :custom
    (mood-line-gpyph-alist mood-line-glyphs-unicode))

  (set-frame-parameter (selected-frame) 'alpha '(97 . 73))
  (add-to-list 'default-frame-alist '(alpha . (97 . 73)))

  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(97 . 73) '(100 . 100)))))
  (global-set-key (kbd "C-S-s") 'toggle-transparency)

  (use-package all-the-icons
    :ensure t)

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package nerd-icons
    :ensure t
    :config
    (setq nerd-icons-font-family "Iosevka Nerd Font"))

  (add-hook 'after-make-frame-functions
            (lambda (f)
              (with-selected-frame f
                (set-frame-font "Iosevka Nerd Font 11" nil t)
                (set-face-attribute 'mode-line nil :font "Iosevka Nerd Font 12" :height 100)
                (set-face-attribute 'company-tooltip nil :font "Iosevka Nerd Font 11" :height 100))))

  (add-to-list 'default-frame-alist '(height . 64))
  (add-to-list 'default-frame-alist '(width . 370))

#+end_src

#+RESULTS:
: ((tab-bar-lines . 0) (width . 370) (height . 64) (alpha 91 . 55) (vertical-scroll-bars) (left-fringe . 8) (right-fringe . 8))

* General Settings
#+begin_src emacs-lisp
  (menu-bar-mode -1) ; Disable the menu bar
  (tool-bar-mode -1) ; Disable the toolbar
  (scroll-bar-mode -1) ; Disable the scroll bar
  (tab-bar-mode -1) ; Disable the tab bar
  (setq-default indent-tabs-mode nil) ; Use spaces instead of tabs
  (global-display-line-numbers-mode t) ;; Show line numbers
  (setq
   make-backup-files nil ; Disable backup files
   auto-save-default nil ; Disable auto save
   display-line-numbers-type 'relative
   gc-cons-threshold 100000000 ;; 100mb
   read-process-output-max (* 1024 1024)) ;; 1mb

  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (setq ring-bell-function 'ignore)
  (defalias 'yes-or-no-p 'y-or-n-p)

  (use-package async
    :ensure t
    :init (dired-async-mode 1))

  ;; Direnv Configuration
  (require 'direnv)
  (direnv-mode 1)

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)

 #+end_src

* Completion
Using company for code completion.

#+begin_src emacs-lisp
  (use-package company
    :demand t
    :config
    (setq
     company-backends '(company-capf company-files company-dabbrev)
     company-dabbrev-downcase 0
     company-idle-delay 0)
    :init
    :hook (after-init . global-company-mode))

  (use-package company-box
    :demand t
    :config
    (setq
     company-box-icons-alist 'company-box-icons-all-the-icons
     company-box-backends-colors nil
     company-box-show-single-candidate t
     company-box-max-candidates 50
     company-box-doc-delay 0.1
     company-box-enable-icon t
     company-box-scrollbar t)
    :hook (company-mode . company-box-mode))

  (use-package company-quickhelp
    :demand t
    :config
    (setq company-quickhelp-delay 0.1)
    :after company
    :init
    :hook (company-mode . company-quickhelp-mode))
#+end_src

* Copilot
Code completion from Copilot, using the Nvim binary.
Using Nix to fetch the package for me, and make it available in the
symlinked .emacs.d in home.

#+begin_src emacs-lisp
  (let
      (
       (copilot-dir "~/.emacs.d/emacsCopilot")
       (copilot-file "~/.emacs.d/emacsCopilot/copilot.el"))
    ;; Check if the copilot.el file exists
    (when
        (file-exists-p copilot-file)
      ;; Add the directory to the load-path
      (add-to-list 'load-path copilot-dir)
      ;; Try to load the copilot module and catch any errors
      (condition-case err
          (progn
            (require 'copilot)
            (add-hook 'prog-mode-hook 'copilot-mode)
            (define-key copilot-completion-map
                        (kbd "C-p") 'copilot-accept-completion)
            (define-key copilot-mode-map
                        (kbd "<C-S-n>") 'copilot-next-completion
                        (define-key copilot-mode-map
                                    (kbd "<C-S-p>") 'copilot-previous-completion)))
        ;; If there's an error, print a message (you can also log or take other actions)
        (error
         (message "Failed to load copilot: %s" err)))))
#+end_src

* Editor
A compilation of different packages I use.

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode)) ; Enable flycheck

  (use-package highlight-thing
    :config
    (global-highlight-thing-mode)
    :custom
    (highlight-thing-delay-seconds 0.5)
    (highlight-thing-case-sensitive-p t)
    (highlight-thing-ignore-list '("False" "True" "None")))

  (use-package ivy
    :init
    (ivy-mode 1)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) "))

  (use-package editorconfig
    :ensure t
    :diminish editorconfig-mode
    :config
    (editorconfig-mode 1))

  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    :hook
    (pdf-view-mode . (lambda ()
                       (when (bound-and-true-p display-line-numbers-mode)
                         (display-line-numbers-mode -1)))))

  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package whitespace)
  (use-package whitespace-cleanup-mode)
#+end_src

* Evil
Using evil mode for vim keybindings.

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-leader
    :init
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      ;; General
      "fb" 'counsel-find-file
      "ff" 'projectile-find-file
      "fg" 'projectile-ripgrep
      "pp" 'projectile-switch-project
      "ps" 'projectile-switch-to-buffer
      "pc" 'projectile-cleanup-known-projects

      ;; Buffers
      "bb" 'switch-to-buffer
      "bd" 'kill-buffer
      "bn" 'next-buffer
      "bp" 'previous-buffer

      ;; Git
      "/" 'magit-status
      "bm" 'blamer-mode

      ;; LSP
      "gd" 'xref-find-definitions
      "gr" 'xref-find-references
      "gt" 'eglot-find-typeDefinition
      "la" 'eglot-code-actions
      "lq" 'eglot-code-action-quickfix
      "lo" 'eglot-code-actions-organize-imports
      "lf" 'eglot-format
      "lr" 'eglot-rename
      "li" 'indent-region
      "lwd" 'flymake-show-project-diagnostics
      "lbd" 'flymake-show-buffer-diagnostics

      ;; Vterm
      "vt" 'vterm

      ;; Whitespace
      "ws" 'whitespace-mode
      "wc" 'whitespace-cleanup-mode))

  (use-package evil-surround
    :after evil
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :after evil
    :ensure t
    :config
    (evil-commentary-mode 1))

  (use-package evil-visualstar
    :after evil
    :ensure t
    :config
    (global-evil-visualstar-mode 1))

  (use-package evil-matchit
    :after evil
    :ensure t
    :config
    (global-evil-matchit-mode 1))

  (use-package evil-snipe
    :after evil
    :ensure t
    :config
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1))

#+end_src

* Eglot
Using Eglot, emacs builtinn LSP client.
Setup using:
- Java
- Nix
- Python
- Rust
- SBT and Scala
- SQL

Using own created web mode, for vue, typescript and tailwind.

#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :config
    (setq eglot-autoshutdown t))

  (use-package eglot-java
    :hook (java-mode . eglot-java-mode)
    :mode ("\\.java\\'" . java-mode))

  (use-package nixpkgs-fmt
    :commands nixpkgs-fmt
    :hook (nix-mode . nixpkgs-fmt-on-save-mode))

  (use-package nix-mode
    :hook (nix-mode . eglot-ensure)
    :mode "\\.nix\\'")

  (use-package blacken)
  (use-package python-mode
    :hook (python-mode . eglot-ensure))

  (use-package rustic
    :after eglot
    :hook (rustic-mode . eglot-ensure)
    :mode "\\.rs\\'")

  (use-package sbt-mode
    :config
    (setq sbt:program-options '("-Dsbt.supershell=false"))
    :mode "\\.s\\(cala\\|bt\\)$")

  (use-package scala-mode
    :hook ((scala-mode . eglot-ensure)
           (scala-mode . add-scala-format-on-save))
    :mode "\\.scala\\'")

  (defun add-scala-format-on-save ()
    "Add `eglot-format-buffer` to `before-save-hook` (activated in scala-mode only)."
    (add-hook 'before-save-hook
              (lambda ()
                (when (eq 'scala-mode major-mode)
                  (eglot-format-buffer))))
    nil)

  (setq major-mode-remap-alist
        '((bash-mode . bash-ts-mode)
          (css-mode . css-ts-mode)
          (json-mode . js-ts-mode)
          (js2-mode . js-ts-mode)
          (typescript-mode . typescript-ts-mode)))

  (setq treesit-font-lock-level 4)
#+end_src

* Git
Using magit with forge, creates the best environment for working with
Git inside emacs, the only thing missing here is a way to approve PR.
For forge, create a file called ~/.authinfo with the following:

- machine api.github.com login gako358^forge password ==secret-token==

#+begin_src emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :custom
    (git-gutter:update-interval 0.05))

  (use-package git-gutter-fringe
    :after git-gutter
    :config
    (fringe-mode '(8 . 8))
    (define-fringe-bitmap 'git-gutter-fr:added
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:modified
      [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:deleted
      [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248]
      nil nil 'center))

  (use-package blamer
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70))

  (use-package forge
    :after magit)
#+end_src

* Keybindings
Keys that I have binded to my keyboard for easy navigation in emacs

#+begin_src emacs-lisp
  (defun split-window-right-and-move-there-dammit ()
    (interactive)
    (split-window-right)
    (windmove-right))

  (defun split-window-left-and-move-there-dammit ()
    (interactive)
    (split-window-left)
    (windmove-left))

  (defun split-window-below-and-move-there-dammit ()
    (interactive)
    (split-window-below)
    (windmove-down))

  (defun move-text-internal (arg)
    (cond
     ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
          (exchange-point-and-mark))
      (let ((column (current-column))
            (text (delete-and-extract-region (point) (mark))))
        (forward-line arg)
        (move-to-column column t)
        (set-mark (point))
        (insert text)
        (exchange-point-and-mark)
        (setq deactivate-mark nil)))
     (t
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg))
        (forward-line -1)))))

  (defun move-text-down (arg)
    (interactive "*p")
    (move-text-internal arg))

  (defun move-text-up (arg)
    (interactive "*p")
    (move-text-internal (- arg)))

  (defun move-right-and-open-todo ()
    (interactive)
    (split-window-right)
    (windmove-right)
    (find-file "~/Documents/notes/org/todo.org"))

  (global-set-key (kbd "C-S-l") 'split-window-right-and-move-there-dammit)
  (global-set-key (kbd "C-S-h") 'split-window-left-and-move-there-dammit)
  (global-set-key (kbd "C-S-j") 'split-window-below-and-move-there-dammit)
  (global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-S-<down>") 'shrink-window)
  (global-set-key (kbd "C-S-<up>") 'enlarge-window)
  (global-set-key (kbd "C-h") 'windmove-left)
  (global-set-key (kbd "C-j") 'windmove-down)
  (global-set-key (kbd "C-k") 'windmove-up)
  (global-set-key (kbd "C-l") 'windmove-right)
  (global-set-key (kbd "S-<up>") 'move-text-up)
  (global-set-key (kbd "S-<down>") 'move-text-down)
  (global-set-key (kbd "C-<tab>") 'previous-buffer)
  (global-set-key (kbd "C-S-i") 'move-right-and-open-todo)
  (global-set-key (kbd "C-S-n") 'treemacs)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

#+end_src

* ORG Mode
One of the best features of emacs, that i know way to little
about yet...

#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-directory (or org-directory "~/Documents/notes/org/")
          org-id-locations-file (expand-file-name ".orgids" org-directory)
          org-agenda-files (list org-directory)
          org-agenda-deadline-faces '((1.001 . error)
                                      (1.0 . org-warning)
                                      (0.5 . org-upcoming-deadline)
                                      (0.0 . org-upcoming-distant-deadline))
          org-agenda-window-setup 'current-window
          org-agenda-skip-unavailable-files t
          org-agenda-span 10
          org-agenda-start-on-weekday nil
          org-agenda-start-day "-3d"
          org-agenda-inhibit-startup t
          org-indirect-buffer-display 'current-window
          org-eldoc-breadcrumb-separator " → "
          org-enforce-todo-dependencies t
          org-entities-user '(("flat"  "\\flat" nil "" "" "266D" "♭")
                              ("sharp" "\\sharp" nil "" "" "266F" "♯"))
          org-ellipsis " "
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-confirm-babel-evaluate nil
          org-export-with-smart-quotes t
          org-src-window-setup 'current-window
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t
          org-fontify-whole-heading-line t
          org-hide-leading-stars t
          org-image-actual-width nil
          org-imenu-depth 6
          org-priority-faces '((?A . error)
                               (?B . warning)
                               (?C . success))
          org-startup-indented t
          org-tags-column 0
          org-use-sub-superscripts '{}
          org-startup-folded nil))

  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t
          org-roam-directory "~/Documents/notes/roam/"
          org-roam-db-location "~/Documents/notes/roam/org-roam.db"
          org-roam-completion-everywhere t))

  (use-package org-roam-ui
    :init
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

  (use-package org-present
    :hook ((org-present-mode . (lambda ()
                                 (org-present-big)
                                 (org-display-inline-images)
                                 (org-present-hide-cursor)
                                 (org-present-read-only)))
           (org-present-mode-quit . (lambda ()
                                      (org-present-small)
                                      (org-remove-inline-images)
                                      (org-present-show-cursor)
                                      (org-present-read-write))))
    )

  (use-package org-pomodoro
    :init
    (setq org-pomodoro-length 25
          org-pomodoro-short-break-length 5
          org-pomodoro-long-break-length 15
          org-pomodoro-manual-break t))

#+end_src

* Projects
Projectile is the goto project package to use with emacs.
Easy to use and setup, easy use of buffers.

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :config
    (setq projectile-enable-caching t
          projectile-completion-system 'ivy
          projectile-indexing-method 'alien
          projectile-sort-order 'recently-active
          projectile-project-search-path '("~/Projects/" ("~/Projects/workspace/" . 1))))

  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode))
#+end_src

* Terminal

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)

  (use-package multi-vterm
    :ensure t
    :bind (("C-S-t" . multi-vterm-project)
           ("C-S-b" . multi-vterm-dedicated-toggle))
    :config
    (setq multi-vterm-dedicated-window-height 37))
#+end_src

* Web-Mode

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.phtml\\'" . web-mode)
           ("\\.tpl\\.php\\'" . web-mode)
           ("\\.[agj]sp\\'" . web-mode)
           ("\\.as[cp]x\\'" . web-mode)
           ("\\.erb\\'" . web-mode)
           ("\\.mustache\\'" . web-mode)
           ("\\.liquid\\'" . web-mode)
           ("\\.djhtml\\'" . web-mode)
           ("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-enable-auto-closing t
          web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-part-padding 2
          web-mode-script-padding 2
          web-mode-style-padding 2
          web-mode-code-indent-offset 2))
#+end_src

* Yaml-Mode

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (("\\.\\(yml\\|yaml\\)\\'" . yaml-mode)))
#+end_src

* Treemacs
Treemacs is file and project explorer similar to NeoTree or vim's NerdTree, but largely inspired by the project explorer in Exlipse.

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               91
            treemacs-width                           55
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

#+end_src

* Treesitter
Enable treesitter, not ruse if this is needed still...

#+begin_src emacs-lisp
  (use-package tree-sitter
    :hook ((tree-sitter-mode . tree-sitter-hl-mode))
    :init
    (global-tree-sitter-mode))

  (use-package tree-sitter-langs
    :after (tree-sitter))
#+end_src
