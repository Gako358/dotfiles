# Do not modify this file!  It was generated by 'nixos-generate-config'
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, modulesPath, ... }:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot = {
    loader = {
      systemd-boot = {
        enable = true;
        configurationLimit = 10;
      };
      efi = {
        canTouchEfiVariables = true;
        efiSysMountPoint = "/boot/efi";
      };
    };

    supportedFilesystems = [
      "btrfs"
      "fat"
      "vfat"
      "exfat"
    ];

    initrd = {
      availableKernelModules = [ "ata_piix" "uhci_hcd" "virtio_pci" "virtio_scsi" "sd_mod" "sr_mod" ];
      kernelModules = [ ];

      luks.devices."crypted" = {
        device = "/dev/vda2";
        preLVM = true;
        allowDiscards = true;
      };
      systemd = {
        enable = true;
        services.btrfs-prepare = {
          description = "Prepare btrfs subvolumes for root";
          wantedBy = [ "initrd.target" ];
          after = [ "dev-mapper-crypted.device" ];
          before = [ "sysroot.mount" ];
          unitConfig.DefaultDependencies = "no";
          serviceConfig.Type = "oneshot";
          path = [ "/bin" config.system.build.extraUtils ];
          script = ''
            mkdir -p /tmp/btrfs_tmp
            mount -o subvol=/ /dev/mapper/crypted /tmp/btrfs_tmp
            if [[ -e /tmp/btrfs_tmp/root ]]; then
                mkdir -p /tmp/btrfs_tmp/old_roots
                timestamp=$(date --date="@$(stat -c %Y /tmp/btrfs_tmp/root)" "+%Y-%m-%-d_%H:%M:%S")
                mv /tmp/btrfs_tmp/root "/tmp/btrfs_tmp/old_roots/$timestamp"
            fi

            delete_subvolume_recursively() {
                IFS=$'\n'
                for subvol in $(btrfs subvolume list -o "$1" | cut -f 9- -d ' '); do
                    delete_subvolume_recursively "/tmp/btrfs_tmp/$subvol"
                done
                btrfs subvolume delete "$1"
            }

            # Delete old roots after 30 days
            for old_root in $(find /tmp/btrfs_tmp/old_roots/ -maxdepth 1 -mtime +30); do
                delete_subvolume_recursively "$old_root"
            done

            # Create new root subvolume
            btrfs subvolume create /tmp/btrfs_tmp/root
            umount /tmp/btrfs_tmp
            rmdir /tmp/btrfs_tmp
          '';
        };
      };
    };

    plymouth.enable = true;
    kernelParams = [ "quiet" "splash" ];
    kernelModules = [ ];
    extraModulePackages = [ ];
  };

  fileSystems."/" = {
    device = "/dev/mapper/crypted";
    fsType = "btrfs";
    options = [ "subvol=root" "noatime" "compress=zstd" "ssd" "space_cache=v2" ];
  };

  fileSystems."/nix" = {
    device = "/dev/mapper/crypted";
    fsType = "btrfs";
    options = [ "subvol=nix" "noatime" "compress=zstd" "ssd" "space_cache=v2" ];
  };

  fileSystems."/home" = {
    device = "/dev/mapper/crypted";
    fsType = "btrfs";
    options = [ "subvol=home" "noatime" "compress=zstd" "ssd" "space_cache=v2" ];
  };

  fileSystems."/persist" = {
    device = "/dev/mapper/crypted";
    fsType = "btrfs";
    options = [ "subvol=persist" "noatime" "compress=zstd" "ssd" "space_cache=v2" ];
    neededForBoot = true;
  };

  fileSystems."/boot/efi" = {
    device = "/dev/vda1";
    fsType = "vfat";
    options = [ "umask=0077" ];
  };

  swapDevices = [
    { device = "/swap/swapfile"; }
  ];

  # Persistent bind mounts
  fileSystems."/var/log" = {
    device = "/persist/var/log";
    fsType = "none";
    options = [ "bind" ];
    neededForBoot = true;
  };

  networking.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
